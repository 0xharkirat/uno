<!--
***********************************************************************************************
WARNING:
DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
created a backup copy. Incorrect changes to this file will make it
impossible to load or build your projects from the command-line or the IDE.

Copyright (C) Uno Platform Inc. All rights reserved.
***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<PropertyGroup Condition=" $(Configuration) == 'Debug' ">
		<DebugType>portable</DebugType>
		<DebugSymbols>True</DebugSymbols>

		<!-- Required for Hot Reload (See https://github.com/dotnet/sdk/issues/36666) -->
		<IncludeSourceRevisionInInformationalVersion>false</IncludeSourceRevisionInInformationalVersion>
	</PropertyGroup>

	<PropertyGroup>
		<DefaultLanguage Condition=" $(DefaultLanguage) == '' ">en</DefaultLanguage>
	</PropertyGroup>

	<Choose>
		<When Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'">
			<PropertyGroup>
				<IsAndroid>true</IsAndroid>
				<SupportedOSPlatformVersion Condition=" $(SupportedOSPlatformVersion) == '' ">21.0</SupportedOSPlatformVersion>
				<AndroidManifest Condition=" $(AndroidManifest) == '' AND '$(SingleProject)' == 'true' AND Exists($([System.IO.Path]::Combine('$(MSBuildProjectDirectory)', 'Android', 'AndroidManifest.xml'))) ">Android\AndroidManifest.xml</AndroidManifest>
				<AndroidManifest Condition=" $(AndroidManifest) == '' AND '$(SingleProject)' == 'true' AND Exists($([System.IO.Path]::Combine('$(MSBuildProjectDirectory)', 'Platforms', 'Android', 'AndroidManifest.xml'))) ">Platforms\Android\AndroidManifest.xml</AndroidManifest>
			</PropertyGroup>

			<ItemGroup>
				<AndroidEnvironment Condition=" '$(SingleProject)' == 'true' AND Exists($([System.IO.Path]::Combine('$(MSBuildProjectDirectory)', 'Android', 'environment.conf'))) " Include="Android\environment.conf" />
				<AndroidEnvironment Condition=" '$(SingleProject)' == 'true' AND Exists($([System.IO.Path]::Combine('$(MSBuildProjectDirectory)', 'Platforms', 'Android', 'environment.conf'))) " Include="Platforms\Android\environment.conf" />
			</ItemGroup>
		</When>
		<When Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'">
			<PropertyGroup>
				<IsIOSOrCatalyst>true</IsIOSOrCatalyst>
				<IsIOS>true</IsIOS>
				<SupportedOSPlatformVersion Condition=" $(SupportedOSPlatformVersion) == '' ">14.2</SupportedOSPlatformVersion>
			</PropertyGroup>
		</When>
		<When Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'macos'">
			<PropertyGroup>
				<IsMacOS>true</IsMacOS>
				<SupportedOSPlatformVersion Condition=" $(SupportedOSPlatformVersion) == '' ">10.14</SupportedOSPlatformVersion>
			</PropertyGroup>
		</When>
		<When Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'">
			<PropertyGroup>
				<IsIOSOrCatalyst>true</IsIOSOrCatalyst>
				<IsMacCatalyst>true</IsMacCatalyst>
				<SupportedOSPlatformVersion Condition=" $(SupportedOSPlatformVersion) == '' ">14.0</SupportedOSPlatformVersion>
			</PropertyGroup>
		</When>
		<!-- Evaluate windows10 instead of using GetTargetPlatformIdentifier because of duplicate value for WPF -->
		<When Condition="$(TargetFramework.Contains('windows10'))">
			<PropertyGroup>
				<IsWinAppSdk>true</IsWinAppSdk>
				<TargetPlatformMinVersion Condition=" $(TargetPlatformMinVersion) == '' ">10.0.18362.0</TargetPlatformMinVersion>
				<SupportedOSPlatformVersion Condition=" $(SupportedOSPlatformVersion) == '' ">$(TargetPlatformMinVersion)</SupportedOSPlatformVersion>
				<RuntimeIdentifiers Condition=" $(RuntimeIdentifiers) == '' ">win-x86;win-x64;win-arm64</RuntimeIdentifiers>
				<EnableCoreMrtTooling Condition=" $(EnableCoreMrtTooling) == '' AND '$(BuildingInsideVisualStudio)' != 'true' ">false</EnableCoreMrtTooling>
				<EnableMsixTooling Condition=" $(EnableMsixTooling) == '' ">true</EnableMsixTooling>
				<EnableWindowsTargeting Condition=" $(EnableWindowsTargeting) == '' ">true</EnableWindowsTargeting>
			</PropertyGroup>
		</When>
		<When Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'browser'">
			<PropertyGroup>
				<IsBrowser>true</IsBrowser>
			</PropertyGroup>
		</When>
		<When Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'skia'">
			<PropertyGroup>
				<IsSkia>true</IsSkia>
			</PropertyGroup>
		</When>
	</Choose>

	<ItemGroup>
		<!-- Removes native usings to avoid Ambiguous reference -->
		<Using Remove="@(Using->HasMetadata('Platform'))" />
	</ItemGroup>

	<ItemGroup Condition=" !$(IsWinAppSdk) AND $(EnableDefaultUnoItems) == 'true' ">
		<!-- Include all images by default - matches the __WindowsAppSdkDefaultImageIncludes property in the WindowsAppSDK -->
		<Content Include="Assets\**;**/*.png;**/*.bmp;**/*.jpg;**/*.dds;**/*.tif;**/*.tga;**/*.gif" 
			Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder);**\*.svg">
			<Link>$([MSBuild]::MakeRelative ('$(MSBuildProjectDirectory)', '%(Identity)'))</Link>
			<IsDefaultItem>true</IsDefaultItem>
		</Content>
		<Page Include="**\*.xaml" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)">
			<Link>$([MSBuild]::MakeRelative ('$(MSBuildProjectDirectory)', '%(Identity)'))</Link>
			<IsDefaultItem>true</IsDefaultItem>
		</Page>
		<Compile Update="**\*.xaml.cs">
			<DependentUpon>%(Filename)</DependentUpon>
			<Link>$([MSBuild]::MakeRelative ('$(MSBuildProjectDirectory)', '%(Identity)'))</Link>
			<IsDefaultItem>true</IsDefaultItem>
		</Compile>
		<PRIResource Include="**\*.resw" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)">
			<Link>$([MSBuild]::MakeRelative ('$(MSBuildProjectDirectory)', '%(Identity)'))</Link>
			<IsDefaultItem>true</IsDefaultItem>
		</PRIResource>
	</ItemGroup>

	<ItemGroup Condition=" '$(PkgUno_Resizetizer)'!='' ">
		<UnoImage Include="Assets\**\*.svg" Exclude="@(UnoImage)">
			<Link>$([MSBuild]::MakeRelative ('$(MSBuildProjectDirectory)', '%(Identity)'))</Link>
			<IsDefaultItem>true</IsDefaultItem>
		</UnoImage>
	</ItemGroup>

	<!-- Cross Targetting -->
	<Import Project="$(MSBuildThisFileDirectory)../targets/Uno.CrossTargetting.targets" />

	<!-- WinUI -->
	<Import Project="$(MSBuildThisFileDirectory)..\targets\Uno.SingleProject.WinAppSdk.targets"
			Condition=" $(IsWinAppSdk) AND $(SingleProject) == 'true' " />
	<!-- Workaround to avoid including Project XBFs in the PRI file: https://github.com/microsoft/microsoft-ui-xaml/issues/8857 -->
	<Import Project="$(MSBuildThisFileDirectory)..\targets\winappsdk-workaround.targets"
			Condition=" $(IsWinAppSdk) AND '$(SingleProject)' != 'true' and '$(DisableWinUI8857_Workaround)' != 'true' "/>

	<!-- WASM -->
	<Import Project="$(MSBuildThisFileDirectory)..\targets\Uno.SingleProject.Wasm.targets"
			Condition=" $(IsBrowser) AND $(SingleProject) == 'true' " />

	<!-- Skia -->
	<Import Project="$(MSBuildThisFileDirectory)..\targets\Uno.SingleProject.Skia.targets"
			Condition=" $(IsSkia) AND $(SingleProject) == 'true' " />

	<!-- Uno Developers should comment this target out if they need to override UnoVersion for dev testing -->
	<Target Name="UnoSdkVersionCheck"
			AfterTargets="ResolveReferences"
			BeforeTargets="Build"
			Condition="'$(PkgUno_WinUI)' != ''">
		<Error Condition=" '$(UnoVersion)' != 'DefaultUnoVersion' " Text="Do not override the '%24(UnoVersion)'. The '%24(UnoVersion)' must match the version of the Uno.Sdk." />

		<!-- Check if the Uno.WinUI version matches DefaultUnoVersion -->
		<Error Text="The resolved version of Uno.WinUI does not match DefaultUnoVersion. The Version of Uno.WinUI must match the version of the Uno.Sdk.  For more information about updating Uno Platform versions, visit https://aka.platform.uno/migrate-from-previous"
			Condition="$([System.IO.Path]::GetFileName($(PkgUno_WinUI))) != 'DefaultUnoVersion'" />
	</Target>

	<Import Sdk="Microsoft.NET.Sdk" Project="Sdk.targets"  Condition=" $(_UnoImportMicrosoftNETSdkTargets) " />
</Project>
