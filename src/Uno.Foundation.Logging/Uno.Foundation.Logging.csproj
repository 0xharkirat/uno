<Project Sdk="Microsoft.NET.Sdk">
	<PropertyGroup>
		<!-- There is no need to multi-target this project -->
		<!-- We keep it on the oldest supported TFM -->
		<!-- Though we could use UnoTargetFrameworkOverride to choose between NetPrevious and NetCurrent -->
		<!-- As of writing this comment, we don't see a need to do that, so we keep it simple -->
		<TargetFrameworks>$(NetPrevious)</TargetFrameworks>

		<!-- We check specifically for net7.0-ios -->
		<!-- Our builds are now all net8.0+ -->
		<!-- However, Xamarin.UITest doesn't (probably won't) support net8.0+ -->
		<!-- So, we still build SamplesApp in net7.0-ios in CI to be able to run UI tests -->
		<TargetFrameworks Condition="'$(UnoTargetFrameworkOverride)'=='net7.0-ios'">net7.0</TargetFrameworks>
	</PropertyGroup>

	<PropertyGroup>
		<NoWarn>$(NoWarn);NU1701</NoWarn>

		<ProduceReferenceAssembly>false</ProduceReferenceAssembly>
		<Deterministic>true</Deterministic>

		<UseCommonOverridePackage>true</UseCommonOverridePackage>

		<!-- Manual packaging during CI -->
		<IsPackable>false</IsPackable>
	</PropertyGroup>

	<ItemGroup>
		<None Include="..\Common\uno.png" Pack="true" PackagePath="\" />
	</ItemGroup>

	<ItemGroup>
		<EmbeddedResource Include="LinkerDefinition.Wasm.xml">
			<LogicalName>$(AssemblyName).xml</LogicalName>
		</EmbeddedResource>
	</ItemGroup>

	<Target Name="_UnoUIRemoteControlOverrideNuget" AfterTargets="AfterBuild" DependsOnTargets="BuiltProjectOutputGroup" Condition="'$(UnoNugetOverrideVersion)'!=''">

		<PropertyGroup>
			<_OverrideTargetFramework>$(TargetFramework)</_OverrideTargetFramework>
			<_TargetNugetFolder>$(NuGetPackageRoot)\$(AssemblyName)\$(UnoNugetOverrideVersion)\lib\$(TargetFramework)</_TargetNugetFolder>
		</PropertyGroup>
		<ItemGroup>
			<_OutputFiles Include="$(TargetDir)**" />
		</ItemGroup>

		<MakeDir Directories="$(_TargetNugetFolder)" />

		<Message Importance="high" Text="OVERRIDING NUGET PACKAGE CACHE: $(_TargetNugetFolder)" />

		<Copy SourceFiles="@(_OutputFiles)" DestinationFiles="@(_OutputFiles->'$(_TargetNugetFolder)\%(RecursiveDir)%(Filename)%(Extension)')" />
		<Copy SourceFiles="@(_OutputFilesPDB)" DestinationFiles="@(_OutputFilesPDB->'$(_TargetNugetFolder)\%(RecursiveDir)%(Filename).pdb')" />
	</Target>

</Project>
