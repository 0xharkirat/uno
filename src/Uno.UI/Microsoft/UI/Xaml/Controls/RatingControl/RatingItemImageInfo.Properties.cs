// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "RatingItemImageInfo.h"

namespace Microsoft.UI.Xaml.Controls
{
    CppWinRTActivatableClassWithDPFactory(RatingItemImageInfo)
}

#include "RatingItemImageInfo.g.cpp"

GlobalDependencyProperty RatingItemImageInfoProperties.s_DisabledImageProperty{ null };
GlobalDependencyProperty RatingItemImageInfoProperties.s_ImageProperty{ null };
GlobalDependencyProperty RatingItemImageInfoProperties.s_PlaceholderImageProperty{ null };
GlobalDependencyProperty RatingItemImageInfoProperties.s_PointerOverImageProperty{ null };
GlobalDependencyProperty RatingItemImageInfoProperties.s_PointerOverPlaceholderImageProperty{ null };
GlobalDependencyProperty RatingItemImageInfoProperties.s_UnsetImageProperty{ null };

RatingItemImageInfoProperties.RatingItemImageInfoProperties()
{
    EnsureProperties();
}

void RatingItemImageInfoProperties.EnsureProperties()
{
    if (!s_DisabledImageProperty)
    {
        s_DisabledImageProperty =
            InitializeDependencyProperty(
                "DisabledImage",
                name_of<ImageSource>(),
                name_of<RatingItemImageInfo>(),
                false /* isAttached */,
                ValueHelper<ImageSource>.BoxedDefaultValue(),
                null);
    }
    if (!s_ImageProperty)
    {
        s_ImageProperty =
            InitializeDependencyProperty(
                "Image",
                name_of<ImageSource>(),
                name_of<RatingItemImageInfo>(),
                false /* isAttached */,
                ValueHelper<ImageSource>.BoxedDefaultValue(),
                null);
    }
    if (!s_PlaceholderImageProperty)
    {
        s_PlaceholderImageProperty =
            InitializeDependencyProperty(
                "PlaceholderImage",
                name_of<ImageSource>(),
                name_of<RatingItemImageInfo>(),
                false /* isAttached */,
                ValueHelper<ImageSource>.BoxedDefaultValue(),
                null);
    }
    if (!s_PointerOverImageProperty)
    {
        s_PointerOverImageProperty =
            InitializeDependencyProperty(
                "PointerOverImage",
                name_of<ImageSource>(),
                name_of<RatingItemImageInfo>(),
                false /* isAttached */,
                ValueHelper<ImageSource>.BoxedDefaultValue(),
                null);
    }
    if (!s_PointerOverPlaceholderImageProperty)
    {
        s_PointerOverPlaceholderImageProperty =
            InitializeDependencyProperty(
                "PointerOverPlaceholderImage",
                name_of<ImageSource>(),
                name_of<RatingItemImageInfo>(),
                false /* isAttached */,
                ValueHelper<ImageSource>.BoxedDefaultValue(),
                null);
    }
    if (!s_UnsetImageProperty)
    {
        s_UnsetImageProperty =
            InitializeDependencyProperty(
                "UnsetImage",
                name_of<ImageSource>(),
                name_of<RatingItemImageInfo>(),
                false /* isAttached */,
                ValueHelper<ImageSource>.BoxedDefaultValue(),
                null);
    }
}

void RatingItemImageInfoProperties.ClearProperties()
{
    s_DisabledImageProperty = null;
    s_ImageProperty = null;
    s_PlaceholderImageProperty = null;
    s_PointerOverImageProperty = null;
    s_PointerOverPlaceholderImageProperty = null;
    s_UnsetImageProperty = null;
}

void RatingItemImageInfoProperties.DisabledImage(ImageSource & value)
{
    [[gsl.suppress(con)]]
    {
    (RatingItemImageInfo*)(this).SetValue(s_DisabledImageProperty, ValueHelper<ImageSource>.BoxValueIfNecessary(value));
    }
}

ImageSource RatingItemImageInfoProperties.DisabledImage()
{
    return ValueHelper<ImageSource>.CastOrUnbox((RatingItemImageInfo*)(this).GetValue(s_DisabledImageProperty));
}

void RatingItemImageInfoProperties.Image(ImageSource & value)
{
    [[gsl.suppress(con)]]
    {
    (RatingItemImageInfo*)(this).SetValue(s_ImageProperty, ValueHelper<ImageSource>.BoxValueIfNecessary(value));
    }
}

ImageSource RatingItemImageInfoProperties.Image()
{
    return ValueHelper<ImageSource>.CastOrUnbox((RatingItemImageInfo*)(this).GetValue(s_ImageProperty));
}

void RatingItemImageInfoProperties.PlaceholderImage(ImageSource & value)
{
    [[gsl.suppress(con)]]
    {
    (RatingItemImageInfo*)(this).SetValue(s_PlaceholderImageProperty, ValueHelper<ImageSource>.BoxValueIfNecessary(value));
    }
}

ImageSource RatingItemImageInfoProperties.PlaceholderImage()
{
    return ValueHelper<ImageSource>.CastOrUnbox((RatingItemImageInfo*)(this).GetValue(s_PlaceholderImageProperty));
}

void RatingItemImageInfoProperties.PointerOverImage(ImageSource & value)
{
    [[gsl.suppress(con)]]
    {
    (RatingItemImageInfo*)(this).SetValue(s_PointerOverImageProperty, ValueHelper<ImageSource>.BoxValueIfNecessary(value));
    }
}

ImageSource RatingItemImageInfoProperties.PointerOverImage()
{
    return ValueHelper<ImageSource>.CastOrUnbox((RatingItemImageInfo*)(this).GetValue(s_PointerOverImageProperty));
}

void RatingItemImageInfoProperties.PointerOverPlaceholderImage(ImageSource & value)
{
    [[gsl.suppress(con)]]
    {
    (RatingItemImageInfo*)(this).SetValue(s_PointerOverPlaceholderImageProperty, ValueHelper<ImageSource>.BoxValueIfNecessary(value));
    }
}

ImageSource RatingItemImageInfoProperties.PointerOverPlaceholderImage()
{
    return ValueHelper<ImageSource>.CastOrUnbox((RatingItemImageInfo*)(this).GetValue(s_PointerOverPlaceholderImageProperty));
}

void RatingItemImageInfoProperties.UnsetImage(ImageSource & value)
{
    [[gsl.suppress(con)]]
    {
    (RatingItemImageInfo*)(this).SetValue(s_UnsetImageProperty, ValueHelper<ImageSource>.BoxValueIfNecessary(value));
    }
}

ImageSource RatingItemImageInfoProperties.UnsetImage()
{
    return ValueHelper<ImageSource>.CastOrUnbox((RatingItemImageInfo*)(this).GetValue(s_UnsetImageProperty));
}
