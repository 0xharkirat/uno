diff --git a/global.json b/global.json
index d07b28f1dd..e8268dc432 100644
--- a/global.json
+++ b/global.json
@@ -1,11 +1,11 @@
 {
 	"sdk": {
-		"version": "7.0.302",
-		"allowPrerelease": false,
+		"version": "8.0.100-preview.5.23303.2",
+		"allowPrerelease": true,
 		"rollForward": "latestFeature"
 	},
 	"tools": {
-		"dotnet": "7.0.302"
+		"dotnet": "8.0.100-preview.5.23303.2"
 	},
 	"msbuild-sdks": {
 		"MSBuild.Sdk.Extras": "3.0.44"
diff --git a/src/Uno.Foundation.Logging/AssemblyInfo.cs b/src/Uno.Foundation.Logging/AssemblyInfo.cs
index 35a9b609f0..d025e0bdcf 100644
--- a/src/Uno.Foundation.Logging/AssemblyInfo.cs
+++ b/src/Uno.Foundation.Logging/AssemblyInfo.cs
@@ -21,6 +21,7 @@ using global::System.Runtime.InteropServices;
 [assembly: InternalsVisibleTo("Uno.UI.Svg")]
 [assembly: InternalsVisibleTo("Uno.UI.Svg.Skia")]
 [assembly: InternalsVisibleTo("Uno.UI.Runtime.Skia.Gtk")]
+[assembly: InternalsVisibleTo("Uno.UI.Runtime.Skia.MacOS")]
 [assembly: InternalsVisibleTo("Uno.UI.Runtime.Skia.Wpf")]
 [assembly: InternalsVisibleTo("Uno.UI.Maps")]
 [assembly: InternalsVisibleTo("Uno.UI.Runtime.Skia.Tizen")]
diff --git a/src/Uno.UI.Composition/AssemblyInfo.skia.cs b/src/Uno.UI.Composition/AssemblyInfo.skia.cs
index 2e25a48f82..7b671b1cb4 100644
--- a/src/Uno.UI.Composition/AssemblyInfo.skia.cs
+++ b/src/Uno.UI.Composition/AssemblyInfo.skia.cs
@@ -1,6 +1,7 @@
 using global::System.Runtime.CompilerServices;
 
 [assembly: InternalsVisibleTo("Uno.UI.Runtime.Skia.Gtk")]
+[assembly: InternalsVisibleTo("Uno.UI.Runtime.Skia.MacOS")]
 [assembly: InternalsVisibleTo("Uno.UI.Runtime.Skia.Wpf")]
 [assembly: InternalsVisibleTo("Uno.UI.Runtime.Skia.Tizen")]
 [assembly: InternalsVisibleTo("Uno.UI.Runtime.Skia.Linux.FrameBuffer")]
diff --git a/src/Uno.UI.Runtime.Skia.Gtk/Rendering/GLRenderSurfaceBase.OpenGL.cs b/src/Uno.UI.Runtime.Skia.Gtk/Rendering/GLRenderSurfaceBase.OpenGL.cs
index fdb9483eb9..5574f5ac4c 100644
--- a/src/Uno.UI.Runtime.Skia.Gtk/Rendering/GLRenderSurfaceBase.OpenGL.cs
+++ b/src/Uno.UI.Runtime.Skia.Gtk/Rendering/GLRenderSurfaceBase.OpenGL.cs
@@ -30,7 +30,7 @@ namespace Uno.UI.Runtime.Skia.Gtk
 		{
 			if (_gl == null)
 			{
-				throw new InvalidOperationException($"_gl cannot be null");
+				throw new InvalidOperationException("_gl cannot be null");
 			}
 		}
 	}
diff --git a/src/Uno.UI.Runtime.Skia.Gtk/Rendering/OpenGLESRenderSurface.cs b/src/Uno.UI.Runtime.Skia.Gtk/Rendering/OpenGLESRenderSurface.cs
index 13ddd708e6..3feaea1d1d 100644
--- a/src/Uno.UI.Runtime.Skia.Gtk/Rendering/OpenGLESRenderSurface.cs
+++ b/src/Uno.UI.Runtime.Skia.Gtk/Rendering/OpenGLESRenderSurface.cs
@@ -37,6 +37,8 @@ namespace Uno.UI.Runtime.Skia.Gtk
 			_isGLES = true;
 		}
 
+		// TODO cache value
+		// TODO shortcut evaluations, e.g. return false if macOS
 		public static bool IsSupported
 		{
 			get
diff --git a/src/Uno.UI/AssemblyInfo.skia.cs b/src/Uno.UI/AssemblyInfo.skia.cs
index 9ca2d9832c..07a66f6a72 100644
--- a/src/Uno.UI/AssemblyInfo.skia.cs
+++ b/src/Uno.UI/AssemblyInfo.skia.cs
@@ -1,6 +1,7 @@
 using global::System.Runtime.CompilerServices;
 
 [assembly: InternalsVisibleTo("Uno.UI.Runtime.Skia.Gtk")]
+[assembly: InternalsVisibleTo("Uno.UI.Runtime.Skia.MacOS")]
 [assembly: InternalsVisibleTo("Uno.UI.Runtime.Skia.Wpf")]
 [assembly: InternalsVisibleTo("Uno.UI.Runtime.Skia.Tizen")]
 [assembly: InternalsVisibleTo("Uno.UI.Runtime.Skia.Linux.FrameBuffer")]
diff --git a/src/Uno.UI/UI/Xaml/Internal/InputManager.Keyboard.skia.cs b/src/Uno.UI/UI/Xaml/Internal/InputManager.Keyboard.skia.cs
index 8a5e3cebc7..558311be30 100644
--- a/src/Uno.UI/UI/Xaml/Internal/InputManager.Keyboard.skia.cs
+++ b/src/Uno.UI/UI/Xaml/Internal/InputManager.Keyboard.skia.cs
@@ -52,13 +52,12 @@ partial class InputManager
 				return;
 			}
 
-			originalSource.RaiseEvent(
-				UIElement.KeyDownEvent,
-				new KeyRoutedEventArgs(originalSource, args.VirtualKey, args.KeyboardModifiers, args.KeyStatus, args.UnicodeKey)
-				{
-					CanBubbleNatively = false
-				}
-			);
+			var krea = new KeyRoutedEventArgs(originalSource, args.VirtualKey, args.KeyboardModifiers, args.KeyStatus, args.UnicodeKey)
+			{
+				CanBubbleNatively = false
+			};
+			originalSource.RaiseEvent(UIElement.KeyDownEvent, krea);
+			args.Handled = krea.Handled;
 
 			if (this.Log().IsEnabled(LogLevel.Trace))
 			{
diff --git a/src/Uno.UWP/AssemblyInfo.skia.cs b/src/Uno.UWP/AssemblyInfo.skia.cs
index e469d3be1a..98f51fae2f 100644
--- a/src/Uno.UWP/AssemblyInfo.skia.cs
+++ b/src/Uno.UWP/AssemblyInfo.skia.cs
@@ -5,3 +5,4 @@ using global::System.Runtime.CompilerServices;
 [assembly: InternalsVisibleTo("Uno.UI.Runtime.Skia.Tizen")]
 [assembly: InternalsVisibleTo("Uno.UI.Runtime.Skia.Linux.FrameBuffer")]
 [assembly: InternalsVisibleTo("Uno.UI.XamlHost.Skia.Wpf")]
+[assembly: InternalsVisibleTo("Uno.UI.Runtime.Skia.MacOS")]
diff --git a/src/Uno.UWP/Storage/Pickers/FileOpenPicker.skia.cs b/src/Uno.UWP/Storage/Pickers/FileOpenPicker.skia.cs
index 35a775144f..9d63032219 100644
--- a/src/Uno.UWP/Storage/Pickers/FileOpenPicker.skia.cs
+++ b/src/Uno.UWP/Storage/Pickers/FileOpenPicker.skia.cs
@@ -22,6 +22,7 @@ namespace Windows.Storage.Pickers
 				throw new NotSupportedException("FileOpenPicker is not supported on this target.");
 			}
 
+			_fileOpenPickerExtension.Customize(this);
 			return await _fileOpenPickerExtension.PickSingleFileAsync(token);
 		}
 
@@ -32,6 +33,7 @@ namespace Windows.Storage.Pickers
 				throw new NotSupportedException("FileOpenPicker is not supported on this target.");
 			}
 
+			_fileOpenPickerExtension.Customize(this);
 			return await _fileOpenPickerExtension.PickMultipleFilesAsync(token);
 		}
 	}
diff --git a/src/Uno.UWP/Storage/Pickers/Internal/IFileOpenPickerExtension.skia.cs b/src/Uno.UWP/Storage/Pickers/Internal/IFileOpenPickerExtension.skia.cs
index 30a8c84d2c..40b17d1063 100644
--- a/src/Uno.UWP/Storage/Pickers/Internal/IFileOpenPickerExtension.skia.cs
+++ b/src/Uno.UWP/Storage/Pickers/Internal/IFileOpenPickerExtension.skia.cs
@@ -4,6 +4,7 @@ using System.Collections.Generic;
 using System.Threading;
 using System.Threading.Tasks;
 using Windows.Storage;
+using Windows.Storage.Pickers;
 
 namespace Uno.Extensions.Storage.Pickers
 {
@@ -12,5 +13,9 @@ namespace Uno.Extensions.Storage.Pickers
 		Task<StorageFile?> PickSingleFileAsync(CancellationToken token);
 
 		Task<IReadOnlyList<StorageFile>> PickMultipleFilesAsync(CancellationToken token);
+
+		// called just before Pick* methods to allow the customization of the native picker to match,
+		// as much as possible, the user selected properties of the WinUI picker
+		void Customize(FileOpenPicker picker) {}
 	}
 }
diff --git a/src/Uno.UWP/System/Launcher.cs b/src/Uno.UWP/System/Launcher.cs
index c316487532..a8e528e211 100644
--- a/src/Uno.UWP/System/Launcher.cs
+++ b/src/Uno.UWP/System/Launcher.cs
@@ -10,10 +10,10 @@ namespace Windows.System
 {
 	public static partial class Launcher
 	{
-#if __ANDROID__ || __IOS__ || __MACOS__
+#if __ANDROID__ || __IOS__ || __MACOS__ || __SKIA__
 		private const string MicrosoftUriPrefix = "ms-";
 
-		private static bool IsSpecialUri(Uri uri) => uri.Scheme.StartsWith(MicrosoftUriPrefix, StringComparison.InvariantCultureIgnoreCase);
+		internal static bool IsSpecialUri(Uri uri) => uri.Scheme.StartsWith(MicrosoftUriPrefix, StringComparison.InvariantCultureIgnoreCase);
 #endif
 
 		public static IAsyncOperation<bool> LaunchUriAsync(Uri uri)
diff --git a/src/Uno.UWP/UI/Core/Internal/IUnoKeyboardInputSource.cs b/src/Uno.UWP/UI/Core/Internal/IUnoKeyboardInputSource.cs
index 302b24e30a..f9ac210e13 100644
--- a/src/Uno.UWP/UI/Core/Internal/IUnoKeyboardInputSource.cs
+++ b/src/Uno.UWP/UI/Core/Internal/IUnoKeyboardInputSource.cs
@@ -1,7 +1,6 @@
 ï»¿#nullable enable
 
 using Windows.Foundation;
-using Windows.UI.Core;
 
 namespace Windows.UI.Core;
 
